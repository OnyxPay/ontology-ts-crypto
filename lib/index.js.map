{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"crypto\"","webpack:///external \"long\"","webpack:///external \"big-integer\"","webpack:///external \"elliptic\"","webpack:///external \"js-sha3\"","webpack:///external \"bytebuffer\"","webpack:///external \"bs58\"","webpack:///external \"bip39-lite\"","webpack:///external \"hdkey-secp256r1\"","webpack:///external \"scrypt-async\"","webpack:///./src/crypto/curveLabel.ts","webpack:///./src/crypto/consts.ts","webpack:///./src/crypto/signatureScheme.ts","webpack:///./src/crypto/keyType.ts","webpack:///./src/crypto/key.ts","webpack:///./src/utils/reader.ts","webpack:///./src/utils/writer.ts","webpack:///./src/crypto/publicKey.ts","webpack:///./src/crypto/signature.ts","webpack:///./src/crypto/privateKey.ts","webpack:///./src/utils/hash.ts","webpack:///./src/utils/serialize.ts","webpack:///./src/utils/opCode.ts","webpack:///./src/utils/program.ts","webpack:///./src/crypto/address.ts","webpack:///./src/wallet/scrypt.ts","webpack:///./src/wallet/account.ts","webpack:///./src/wallet/identity.ts","webpack:///./src/wallet/wallet.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","CurveLabel","[object Object]","label","hex","preset","this","values","push","item","find","v","undefined","Error","SECP224R1","SECP256R1","SECP384R1","SECP521R1","ED25519","DEFAULT_ALGORITHM","algorithm","parameters","curve","ADDR_LEN","SignatureScheme","labelJWS","ECDSAwithSHA224","ECDSAwithSHA256","ECDSAwithSHA384","ECDSAwithSHA512","ECDSAwithSHA3_224","ECDSAwithSHA3_256","ECDSAwithSHA3_384","ECDSAwithSHA3_512","ECDSAwithRIPEMD160","EDDSAwithSHA512","KeyType","defaultSchema","ECDSA","EDDSA","key_Key","Buffer","fromLabel","key_KeyParameters","msg","scheme","hash","external_crypto_","update","digest","external_js_sha3_","arrayBuffer","schema","obj","reader_Reader","b","reader","external_bytebuffer_","readUint8","count","readBytes","toBuffer","readUint16","readUint32","readUint64","readInt16","readInt32","readInt64","offset","limit","whence","oldOffset","max","readVarUInt","external_long_","toNumber","fb","readByte","readUInt16","readUInt32","readUInt64","gt","maxlen","readVarBytes","toString","writer_Writer","writer","mark","flip","buffer","reset","lt","writeUint8","lte","writeUint16","writeUint32","writeUint64","writeVarUint","length","writeBytes","writeVarBytes","append","val","publicKey_PublicKey","pk","algorithmHex","curveHex","fromHex","a","ec","external_elliptic_","paKey","keyFromPublic","pbKey","pa","getPublic","pb","getX","getY","Number","w","getBytes","signature","isSchemaSupported","getSignContent","computeHash","verifySignature","verifyEcDSASignature","verifyEdDSASignature","slice","verify","signature_Signature","data","sigScheme","position","privateKey_PrivateKey","keyType","sk","getEcDSAPublicKey","getEdDSAPublicKey","signed","computeSignature","computeEcDSASignature","computeEdDSASignature","sign","canonical","pers","concat","toArrayLike","R","S","keyFromPrivate","keyFromSecret","sha256","sh","md160","bigIntToBytes","bs","toArray","isZero","isNegative","external_big_integer_","add","reverse","bigIntFromBytes","ba","bytes","Array","from","subarray","negate","PUSH0","PUSHF","PUSHBYTES1","PUSHBYTES75","PUSHDATA1","PUSHDATA2","PUSHDATA4","PUSHM1","PUSH1","PUSHT","PUSH2","PUSH3","PUSH4","PUSH5","PUSH6","PUSH7","PUSH8","PUSH9","PUSH10","PUSH11","PUSH12","PUSH13","PUSH14","PUSH15","PUSH16","NOP","JMP","JMPIF","JMPIFNOT","CALL","RET","APPCALL","SYSCALL","TAILCALL","DUPFROMALTSTACK","TOALTSTACK","FROMALTSTACK","XDROP","XSWAP","XTUCK","DEPTH","DROP","DUP","NIP","OVER","PICK","ROLL","ROT","SWAP","TUCK","CAT","SUBSTR","LEFT","RIGHT","SIZE","INVERT","AND","OR","XOR","EQUAL","INC","DEC","SIGN","NEGATE","ABS","NOT","NZ","ADD","SUB","MUL","DIV","MOD","SHL","SHR","BOOLAND","BOOLOR","NUMEQUAL","NUMNOTEQUAL","LT","GT","LTE","GTE","MIN","MAX","WITHIN","SHA1","SHA256","HASH160","HASH256","CHECKSIG","VERIFY","CHECKMULTISIG","ARRAYSIZE","PACK","UNPACK","PICKITEM","SETITEM","NEWARRAY","NEWSTRUCT","NEWMAP","APPEND","REVERSE","REMOVE","HASKEY","KEYS","VALUES","THROW","THROWIFNOT","program_ProgramBuilder","pushBytes","serialize","opCode","num","eq","writeOpCode","param","programFromPubKey","pushPubKey","getProgram","programFromMultiPubKeys","keys","sort","compare","pushNum","forEach","programFromParams","sigs","address_Address","e","code","prog","fromVmCode","encoded","decoded","external_bs58_","hexDecoded","address","toBase58","other","equals","copy","checksum","datas","DEFAULT_SCRYPT","N","keyLength","DEFAULT_SCRYPT_KEYLENGTH","decryptWithGcm","encrypted","salt","keyphrase","scryptParams","scryptOptions","_objectWithoutProperties","result","ciphertext","authTag","derived","scryptSync","normalize","derived1","iv","aad","decipher","setAAD","setAuthTag","decrypted","final","err","encryptWithGcm","privateKey","cipher","getAuthTag","params","external_scrypt_async_","dkLen","ONT_BIP44_PATH","account_Account","password","scrypt","account","lock","isDefault","publicKey","getPublicKey","fromPubKey","encryptedKey","mnemonic","trim","external_bip39_lite_","seed","pri","external_hdkey_secp256r1_","fromMasterSeed","derive","JSON","parse","deserializeJson","fromBase58","extra","stringify","enc-alg","serializeJson","identity_Identity","controls","identity","controlData","id","ontid","toOntId","map","control","deserializeControlsJson","serializeControlsJson","wallet_Wallet","addr","wallet","accounts","identities","createTime","Date","toISOString","version","defaultOntid","defaultAccountAddress","ac","constructAddress","filter","__webpack_exports__","opCode_namespaceObject","hash_namespaceObject","serialize_namespaceObject"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","module.exports = require(\"crypto\");","module.exports = require(\"long\");","module.exports = require(\"big-integer\");","module.exports = require(\"elliptic\");","module.exports = require(\"js-sha3\");","module.exports = require(\"bytebuffer\");","module.exports = require(\"bs58\");","module.exports = require(\"bip39-lite\");","module.exports = require(\"hdkey-secp256r1\");","module.exports = require(\"scrypt-async\");","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/**\r\n * Elliptic curve used.\r\n */\r\nexport class CurveLabel {\r\n  static values: CurveLabel[] = [];\r\n\r\n  static SECP224R1 = new CurveLabel('P-224', 1, 'p224');\r\n  static SECP256R1 = new CurveLabel('P-256', 2, 'p256');\r\n  static SECP384R1 = new CurveLabel('P-384', 3, 'p384');\r\n  static SECP521R1 = new CurveLabel('P-521', 4, 'p521');\r\n  static ED25519 = new CurveLabel('ed25519', 25, 'ed25519');\r\n\r\n  /**\r\n   * Finds Curvecorresponding to specified hex representation.\r\n   *\r\n   * @param hex Byte hex value\r\n   */\r\n  static fromHex(hex: number): CurveLabel {\r\n    const item = CurveLabel.values.find((v) => v.hex === hex);\r\n    if (item === undefined) {\r\n      throw new Error('Enum value not found');\r\n    }\r\n\r\n    return item;\r\n  }\r\n\r\n  /**\r\n   * Finds Curve corresponding to specified label representation.\r\n   *\r\n   * @param label Label\r\n   */\r\n  static fromLabel(label: string): CurveLabel {\r\n    const item = CurveLabel.values.find((v) => v.label === label);\r\n    if (item === undefined) {\r\n      throw new Error('Enum value not found');\r\n    }\r\n\r\n    return item;\r\n  }\r\n\r\n  label: string;\r\n  hex: number;\r\n  preset: string;\r\n\r\n  constructor(label: string, hex: number, preset: string) {\r\n    this.label = label;\r\n    this.hex = hex;\r\n    this.preset = preset;\r\n\r\n    CurveLabel.values.push(this);\r\n  }\r\n}\r\n","export const DEFAULT_ALGORITHM = {\r\n  algorithm: 'ECDSA',\r\n  parameters: {\r\n    curve: 'P-256' // also called secp256r1\r\n  }\r\n};\r\n\r\nexport const ADDR_LEN = 20;\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n// tslint:disable:variable-name\r\n\r\n/**\r\n * Schema used during signing and verification of signature.\r\n */\r\nexport class SignatureScheme {\r\n  static values: SignatureScheme[] = [];\r\n\r\n  static ECDSAwithSHA224 = new SignatureScheme('SHA224withECDSA', 0, 'ES224');\r\n  static ECDSAwithSHA256 = new SignatureScheme('SHA256withECDSA', 1, 'ES256');\r\n  static ECDSAwithSHA384 = new SignatureScheme('SHA384withECDSA', 2, 'ES384');\r\n  static ECDSAwithSHA512 = new SignatureScheme('SHA512withECDSA', 3, 'ES512');\r\n  static ECDSAwithSHA3_224 = new SignatureScheme('SHA3-224withECDSA', 4, 'ES3-224');\r\n  static ECDSAwithSHA3_256 = new SignatureScheme('SHA3-256withECDSA', 5, 'ES3-256');\r\n  static ECDSAwithSHA3_384 = new SignatureScheme('SHA3-384withECDSA', 6, 'ES3-384');\r\n  static ECDSAwithSHA3_512 = new SignatureScheme('SHA3-512withECDSA', 7, 'ES3-512');\r\n  static ECDSAwithRIPEMD160 = new SignatureScheme('RIPEMD160withECDSA', 8, 'ER160');\r\n  static EDDSAwithSHA512 = new SignatureScheme('SHA512withEdDSA', 10, 'EDS512');\r\n\r\n  /**\r\n   * Finds Signature schema corresponding to specified hex representation.\r\n   *\r\n   * @param hex Byte hex value\r\n   */\r\n  static fromHex(hex: number): SignatureScheme {\r\n    const item = SignatureScheme.values.find((v) => v.hex === hex);\r\n    if (item === undefined) {\r\n      throw new Error('Enum value not found');\r\n    }\r\n\r\n    return item;\r\n  }\r\n\r\n  /**\r\n   * Finds Signature schema corresponding to specified label representation.\r\n   *\r\n   * @param label Label\r\n   */\r\n  static fromLabel(label: string): SignatureScheme {\r\n    const item = SignatureScheme.values.find((v) => v.label === label);\r\n    if (item === undefined) {\r\n      throw new Error('Enum value not found');\r\n    }\r\n\r\n    return item;\r\n  }\r\n\r\n  /**\r\n   * Finds Signature schema corresponding to specified label representation in JWS.\r\n   *\r\n   * @param label Label\r\n   */\r\n  static fromLabelJWS(label: string): SignatureScheme {\r\n    const item = SignatureScheme.values.find((v) => v.labelJWS === label);\r\n    if (item === undefined) {\r\n      throw new Error('Enum value not found');\r\n    }\r\n\r\n    return item;\r\n  }\r\n\r\n  label: string;\r\n  hex: number;\r\n  labelJWS: string;\r\n\r\n  constructor(label: string, hex: number, labelJWS: string) {\r\n    this.label = label;\r\n    this.hex = hex;\r\n    this.labelJWS = labelJWS;\r\n\r\n    SignatureScheme.values.push(this);\r\n  }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { SignatureScheme } from './signatureScheme';\r\n\r\n/**\r\n * Type of key. ECDSA is the default one to use.\r\n */\r\nexport class KeyType {\r\n  static values: KeyType[] = [];\r\n\r\n  static ECDSA = new KeyType('ECDSA', 0x12, SignatureScheme.ECDSAwithSHA256);\r\n  static EDDSA = new KeyType('EDDSA', 0x14, SignatureScheme.EDDSAwithSHA512);\r\n\r\n  /**\r\n   * Finds Key type corresponding to specified hex representation.\r\n   *\r\n   * @param hex Byte hex value\r\n   */\r\n  static fromHex(hex: number): KeyType {\r\n    const item = KeyType.values.find((v) => v.hex === hex);\r\n    if (item === undefined) {\r\n      throw new Error('Enum value not found');\r\n    }\r\n\r\n    return item;\r\n  }\r\n\r\n  /**\r\n   * Finds Key type corresponding to specified label representation.\r\n   *\r\n   * @param label Label\r\n   */\r\n  static fromLabel(label: string): KeyType {\r\n    const item = KeyType.values.find((v) => v.label === label);\r\n    if (item === undefined) {\r\n      throw new Error('Enum value not found');\r\n    }\r\n\r\n    return item;\r\n  }\r\n\r\n  label: string;\r\n  hex: number;\r\n  defaultSchema: SignatureScheme;\r\n\r\n  constructor(label: string, hex: number, defaultSchema: SignatureScheme) {\r\n    this.label = label;\r\n    this.hex = hex;\r\n    this.defaultSchema = defaultSchema;\r\n\r\n    KeyType.values.push(this);\r\n  }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { createHash } from 'crypto';\r\nimport { sha3_224, sha3_256, sha3_384, sha3_512 } from 'js-sha3';\r\nimport { DEFAULT_ALGORITHM } from './consts';\r\nimport { CurveLabel } from './curveLabel';\r\nimport { KeyType } from './keyType';\r\nimport { SignatureScheme } from './signatureScheme';\r\n\r\n/**\r\n * Common representation of private or public key\r\n */\r\nexport class Key {\r\n  /**\r\n   * Algorithm used for key generation.\r\n   */\r\n  algorithm: KeyType;\r\n\r\n  /**\r\n   * Parameters of the algorithm.\r\n   */\r\n  parameters: KeyParameters;\r\n\r\n  /**\r\n   * Key data.\r\n   */\r\n  key: Buffer;\r\n\r\n  /**\r\n   * Creates Key.\r\n   *\r\n   * If no algorithm or parameters are specified, default values will be used.\r\n   * This is strongly discurraged, because it will forbid using other Key types.\r\n   * Therefore use it only for testing.\r\n   *\r\n   * @param key Hex encoded key value\r\n   * @param algorithm Key type\r\n   * @param parameters Parameters of the key type\r\n   */\r\n  constructor(key: Buffer | string, algorithm?: KeyType, parameters?: KeyParameters) {\r\n    if (typeof key === 'string') {\r\n      key = new Buffer(key, 'hex');\r\n    }\r\n\r\n    this.key = key;\r\n\r\n    if (algorithm === undefined) {\r\n      algorithm = KeyType.fromLabel(DEFAULT_ALGORITHM.algorithm);\r\n    }\r\n\r\n    if (parameters === undefined) {\r\n      parameters = new KeyParameters(CurveLabel.fromLabel(DEFAULT_ALGORITHM.parameters.curve));\r\n    }\r\n\r\n    this.algorithm = algorithm;\r\n    this.parameters = parameters;\r\n  }\r\n\r\n  /**\r\n   * Computes hash of message using hashing function of signature schema.\r\n   *\r\n   * @param msg input data\r\n   * @param scheme Signing schema to use\r\n   */\r\n  computeHash(msg: Buffer, scheme: SignatureScheme): Buffer {\r\n    if (scheme === SignatureScheme.ECDSAwithSHA224) {\r\n      const hash = createHash('sha224');\r\n      hash.update(msg);\r\n      return hash.digest();\r\n    } else if (scheme === SignatureScheme.ECDSAwithSHA256) {\r\n      const hash = createHash('sha256');\r\n      hash.update(msg);\r\n      return hash.digest();\r\n    } else if (scheme === SignatureScheme.ECDSAwithSHA384) {\r\n      const hash = createHash('sha384');\r\n      hash.update(msg);\r\n      return hash.digest();\r\n    } else if (scheme === SignatureScheme.ECDSAwithSHA3_512 || scheme === SignatureScheme.EDDSAwithSHA512) {\r\n      const hash = createHash('sha512');\r\n      hash.update(msg);\r\n      return hash.digest();\r\n    } else if (scheme === SignatureScheme.ECDSAwithRIPEMD160) {\r\n      const hash = createHash('ripemd160');\r\n      hash.update(msg);\r\n      return hash.digest();\r\n    } else if (scheme === SignatureScheme.ECDSAwithSHA3_224) {\r\n      return new Buffer(sha3_224.arrayBuffer(msg));\r\n    } else if (scheme === SignatureScheme.ECDSAwithSHA3_256) {\r\n      return new Buffer(sha3_256.arrayBuffer(msg));\r\n    } else if (scheme === SignatureScheme.ECDSAwithSHA3_384) {\r\n      return new Buffer(sha3_384.arrayBuffer(msg));\r\n    } else if (scheme === SignatureScheme.ECDSAwithSHA3_512) {\r\n      return new Buffer(sha3_512.arrayBuffer(msg));\r\n    } else {\r\n      throw new Error('Unsupported hash algorithm.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if signing schema is compatible with key type.\r\n   *\r\n   * @param schema Signing schema to use\r\n   */\r\n  isSchemaSupported(schema: SignatureScheme): boolean {\r\n    switch (schema) {\r\n      case SignatureScheme.ECDSAwithSHA224:\r\n      case SignatureScheme.ECDSAwithSHA256:\r\n      case SignatureScheme.ECDSAwithSHA384:\r\n      case SignatureScheme.ECDSAwithSHA512:\r\n      case SignatureScheme.ECDSAwithSHA3_224:\r\n      case SignatureScheme.ECDSAwithSHA3_256:\r\n      case SignatureScheme.ECDSAwithSHA3_384:\r\n      case SignatureScheme.ECDSAwithSHA3_512:\r\n      case SignatureScheme.ECDSAwithRIPEMD160:\r\n        return this.algorithm === KeyType.ECDSA;\r\n      case SignatureScheme.EDDSAwithSHA512:\r\n        return this.algorithm === KeyType.EDDSA;\r\n      default:\r\n        throw new Error('Unsupported signature schema.');\r\n    }\r\n  }\r\n}\r\n\r\nexport class KeyParameters {\r\n  static deserializeJson(obj: any) {\r\n    return new KeyParameters(CurveLabel.fromLabel(obj.curve));\r\n  }\r\n\r\n  curve: CurveLabel;\r\n\r\n  constructor(curve: CurveLabel) {\r\n    this.curve = curve;\r\n  }\r\n\r\n  serializeJson() {\r\n    return {\r\n      curve: this.curve.label\r\n    };\r\n  }\r\n}\r\n","import * as ByteBuffer from 'bytebuffer';\r\nimport * as Long from 'long';\r\n\r\nexport type Whence = 'start' | 'relative';\r\n\r\nexport class Reader {\r\n  reader: ByteBuffer;\r\n\r\n  constructor(b: Buffer) {\r\n    this.reader = ByteBuffer.wrap(b, 'utf-8', true);\r\n  }\r\n\r\n  readByte(): number {\r\n    return this.reader.readUint8();\r\n  }\r\n\r\n  readBytes(count: number): Buffer {\r\n    return new Buffer(this.reader.readBytes(count).toBuffer());\r\n  }\r\n\r\n  readUInt16(): number {\r\n    return this.reader.readUint16();\r\n  }\r\n\r\n  readUInt32(): number {\r\n    return this.reader.readUint32();\r\n  }\r\n\r\n  readUInt64(): Long {\r\n    return this.reader.readUint64();\r\n  }\r\n\r\n  readInt16(): number {\r\n    return this.reader.readInt16();\r\n  }\r\n\r\n  readInt32(): number {\r\n    return this.reader.readInt32();\r\n  }\r\n\r\n  readInt64(): Long {\r\n    return this.reader.readInt64();\r\n  }\r\n\r\n  position(): number {\r\n    return this.reader.offset;\r\n  }\r\n\r\n  length(): number {\r\n    return this.reader.limit;\r\n  }\r\n\r\n  seek(offset: number, whence: Whence): number {\r\n    if (whence === 'start') {\r\n      const oldOffset = this.reader.offset;\r\n      this.reader.offset = offset;\r\n      return oldOffset;\r\n    } else if (whence === 'relative') {\r\n      const oldOffset = this.reader.offset;\r\n      this.reader.offset = oldOffset + offset;\r\n      return oldOffset;\r\n    } else {\r\n      throw new Error('Unsupported Whence');\r\n    }\r\n  }\r\n\r\n  readVarBytes(max?: number): Buffer {\r\n    const n = this.readVarUInt(max !== undefined ? Long.fromNumber(max) : undefined).toNumber();\r\n    return this.readBytes(n);\r\n  }\r\n\r\n  readVarInt(max?: Long): Long {\r\n    const fb = this.readByte();\r\n    let value: Long;\r\n\r\n    switch (fb) {\r\n      case 0xfd:\r\n        value = Long.fromNumber(this.readUInt16());\r\n        break;\r\n      case 0xfe:\r\n        value = Long.fromNumber(this.readUInt32());\r\n        break;\r\n      case 0xff:\r\n        value = this.readUInt64();\r\n        break;\r\n      default:\r\n        value = Long.fromNumber(fb);\r\n    }\r\n    if (max !== undefined && value.gt(max)) {\r\n      return Long.ZERO;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readVarUInt(max?: Long): Long {\r\n    const fb = this.readByte();\r\n    let value: Long;\r\n\r\n    switch (fb) {\r\n      case 0xfd:\r\n        value = Long.fromNumber(this.readInt16());\r\n        break;\r\n      case 0xfe:\r\n        value = Long.fromNumber(this.readInt32());\r\n        break;\r\n      case 0xff:\r\n        value = this.readInt64();\r\n        break;\r\n\r\n      default:\r\n        value = Long.fromNumber(fb);\r\n    }\r\n    if (max !== undefined && value.gt(max)) {\r\n      return Long.ZERO;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readVarString(maxlen?: number): string {\r\n    const bs = this.readVarBytes(maxlen);\r\n    return bs.toString('utf-8');\r\n  }\r\n}\r\n","import * as ByteBuffer from 'bytebuffer';\r\nimport * as Long from 'long';\r\n\r\nexport class Writer {\r\n  private writer: ByteBuffer;\r\n\r\n  constructor() {\r\n    this.writer = new ByteBuffer(undefined, true, true);\r\n  }\r\n\r\n  getBytes() {\r\n    this.writer.mark();\r\n    this.writer.flip();\r\n    const buffer = new Buffer(this.writer.toBuffer());\r\n    this.writer.reset();\r\n    return buffer;\r\n  }\r\n\r\n  writeVarUint(value: Long | number) {\r\n    if (typeof value === 'number') {\r\n      value = Long.fromNumber(value);\r\n    }\r\n\r\n    if (value.lt(0xfd)) {\r\n      this.writer.writeUint8(value.toNumber());\r\n    } else if (value.lte(0xffff)) {\r\n      this.writer.writeUint8(0xfd);\r\n      this.writer.writeUint16(value.toNumber());\r\n    } else if (value.lte(0xffffffff)) {\r\n      this.writer.writeUint8(0xfe);\r\n      this.writer.writeUint32(value.toNumber());\r\n    } else {\r\n      this.writer.writeUint8(0xff);\r\n      this.writer.writeUint64(value);\r\n    }\r\n  }\r\n  writeVarBytes(value: Buffer) {\r\n    this.writeVarUint(value.length);\r\n    this.writeBytes(value);\r\n  }\r\n  writeString(value: string) {\r\n    return this.writeVarBytes(new Buffer(value, 'utf-8'));\r\n  }\r\n  writeBytes(value: Buffer) {\r\n    this.writer.append(value);\r\n  }\r\n  writeUint8(val: number) {\r\n    this.writer.writeUint8(val);\r\n  }\r\n  writeUint16(val: number) {\r\n    this.writer.writeUint16(val);\r\n  }\r\n  writeUint32(val: number) {\r\n    this.writer.writeUint32(val);\r\n  }\r\n  writeUint64(val: Long) {\r\n    this.writer.writeUint64(val);\r\n  }\r\n}\r\n\r\n/**\r\n * TODO: might implement\r\n */\r\nexport class LimitedWriter extends Writer {\r\n  limit: number;\r\n\r\n  constructor(limit: number) {\r\n    super();\r\n    this.limit = limit;\r\n  }\r\n}\r\n","import * as elliptic from 'elliptic';\r\nimport { Reader } from '../utils/reader';\r\nimport { Writer } from '../utils/writer';\r\nimport { CurveLabel } from './curveLabel';\r\nimport { Key, KeyParameters } from './key';\r\nimport { KeyType } from './keyType';\r\nimport { Signable } from './signable';\r\nimport { Signature } from './signature';\r\nimport { SignatureScheme } from './signatureScheme';\r\n\r\nexport class PublicKey extends Key {\r\n  /**\r\n   * Deserializes PublicKey\r\n   *\r\n   * @param b Buffer\r\n   *\r\n   */\r\n  static deserialize(b: Buffer): PublicKey {\r\n    const r = new Reader(b);\r\n\r\n    if (b.length === 33) {\r\n      // ECDSA\r\n      const algorithm = KeyType.ECDSA;\r\n      const curve = CurveLabel.SECP256R1;\r\n      const pk = r.readBytes(33);\r\n      return new PublicKey(pk, algorithm, new KeyParameters(curve));\r\n    } else {\r\n      const algorithmHex = r.readByte();\r\n      const curveHex = r.readByte();\r\n      const pk = r.readBytes(r.length() - 2);\r\n\r\n      return new PublicKey(pk, KeyType.fromHex(algorithmHex), new KeyParameters(CurveLabel.fromHex(curveHex)));\r\n    }\r\n  }\r\n\r\n  static compare(a: PublicKey, b: PublicKey) {\r\n    if (a.algorithm !== b.algorithm) {\r\n      return a.algorithm.hex - b.algorithm.hex;\r\n    }\r\n\r\n    switch (a.algorithm) {\r\n      case KeyType.ECDSA:\r\n        const ec = new elliptic.ec(a.parameters.curve.preset);\r\n        const paKey = ec.keyFromPublic(a.key, 'hex');\r\n        const pbKey = ec.keyFromPublic(b.key, 'hex');\r\n        const pa = paKey.getPublic();\r\n        const pb = pbKey.getPublic();\r\n        if (pa.getX() !== pb.getX()) {\r\n          return pa.getX() - pb.getX();\r\n        } else {\r\n          return pa.getY() - pb.getY();\r\n        }\r\n      case KeyType.EDDSA:\r\n        return Number(a.key.toString('hex')) - Number(b.key.toString('hex'));\r\n      default:\r\n        return 0;\r\n    }\r\n  }\r\n\r\n  serialize(): Buffer {\r\n    const w = new Writer();\r\n\r\n    switch (this.algorithm) {\r\n      case KeyType.ECDSA:\r\n        w.writeBytes(this.key);\r\n        break;\r\n      case KeyType.EDDSA:\r\n        w.writeUint8(this.algorithm.hex);\r\n        w.writeUint8(this.parameters.curve.hex);\r\n        w.writeBytes(this.key);\r\n        break;\r\n    }\r\n    return w.getBytes();\r\n  }\r\n\r\n  /**\r\n   * Verifies if the signature was created with private key corresponding to supplied public key\r\n   * and was not tampered with using signature schema.\r\n   *\r\n   * @param msg Buffer input data or Signable object\r\n   * @param signature Signature object\r\n   */\r\n  async verify(msg: Buffer | Signable, signature: Signature): Promise<boolean> {\r\n    if (!this.isSchemaSupported(signature.algorithm)) {\r\n      throw new Error('Signature schema does not match key type.');\r\n    }\r\n\r\n    // retrieves content to sign if not provided directly\r\n    if (!(msg instanceof Buffer)) {\r\n      msg = msg.getSignContent();\r\n    }\r\n\r\n    const hash = this.computeHash(msg, signature.algorithm);\r\n\r\n    return this.verifySignature(hash, signature.value, signature.algorithm);\r\n  }\r\n\r\n  /**\r\n   * For internal use.\r\n   * @param hash Message hash\r\n   * @param signature Hex encoded signature\r\n   * @param schema Signature scheme to use\r\n   */\r\n  verifySignature(hash: Buffer, signature: Buffer, schema: SignatureScheme): boolean {\r\n    switch (schema) {\r\n      case SignatureScheme.ECDSAwithSHA224:\r\n      case SignatureScheme.ECDSAwithSHA256:\r\n      case SignatureScheme.ECDSAwithSHA384:\r\n      case SignatureScheme.ECDSAwithSHA512:\r\n      case SignatureScheme.ECDSAwithSHA3_224:\r\n      case SignatureScheme.ECDSAwithSHA3_256:\r\n      case SignatureScheme.ECDSAwithSHA3_384:\r\n      case SignatureScheme.ECDSAwithSHA3_512:\r\n      case SignatureScheme.ECDSAwithRIPEMD160:\r\n        return this.verifyEcDSASignature(hash, signature);\r\n      case SignatureScheme.EDDSAwithSHA512:\r\n        return this.verifyEdDSASignature(hash, signature);\r\n      default:\r\n        throw new Error('Unsupported signature schema.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifies EcDSA signature of message hash. Curve name is derrived from private key.\r\n   *\r\n   * @param hash Message hash\r\n   * @param signature Hex encoded signature\r\n   */\r\n  verifyEcDSASignature(hash: Buffer, signature: Buffer): boolean {\r\n    const r: any = signature.slice(0, 32);\r\n    const s: any = signature.slice(32, 64);\r\n\r\n    const ec = new elliptic.ec(this.parameters.curve.preset);\r\n    return ec.verify(hash, { r, s }, this.key, 'hex');\r\n  }\r\n\r\n  /**\r\n   * Verifies EdDSA signature of message hash. Curve name is derrived from private key.\r\n   *\r\n   * @param hash Message hash\r\n   * @param signature Hex encoded signature\r\n   */\r\n  verifyEdDSASignature(hash: Buffer, signature: Buffer): boolean {\r\n    const r = signature.slice(0, 64);\r\n    const s = signature.slice(64, 64);\r\n\r\n    const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\r\n    return eddsa.verify(hash, { r, s }, this.key, 'hex');\r\n  }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { Reader } from '../utils/reader';\r\nimport { Writer } from '../utils/writer';\r\nimport { SignatureScheme } from './signatureScheme';\r\n\r\n/**\r\n * Signature generated by signing data with Private Key.\r\n */\r\nexport class Signature {\r\n  /**\r\n   * Deserializes Signature\r\n   * @param data\r\n   */\r\n  static deserialize(data: Buffer): Signature {\r\n    if (data.length < 2) {\r\n      throw new Error('Invalid params.');\r\n    }\r\n\r\n    if (data.length === 64) {\r\n      const sigScheme = SignatureScheme.ECDSAwithSHA256;\r\n      return new Signature(sigScheme, data);\r\n    } else {\r\n      const r = new Reader(data);\r\n      const scheme = r.readByte();\r\n      const sigScheme = SignatureScheme.fromHex(scheme);\r\n      const value = r.readBytes(r.length() - r.position());\r\n      return new Signature(sigScheme, value);\r\n    }\r\n  }\r\n\r\n  algorithm: SignatureScheme;\r\n  value: Buffer;\r\n\r\n  constructor(algorithm: SignatureScheme, value: Buffer) {\r\n    this.algorithm = algorithm;\r\n    this.value = value;\r\n  }\r\n\r\n  /**\r\n   * Serializes signature to Hex representation.\r\n   * For transfer to java backend and verify it.\r\n   */\r\n  serialize(): Buffer {\r\n    const w = new Writer();\r\n    w.writeUint8(this.algorithm.hex);\r\n    w.writeBytes(this.value);\r\n    return w.getBytes();\r\n  }\r\n}\r\n","import { randomBytes } from 'crypto';\r\nimport * as elliptic from 'elliptic';\r\nimport { Reader } from '../utils/reader';\r\nimport { CurveLabel } from './curveLabel';\r\nimport { Key, KeyParameters } from './key';\r\nimport { KeyType } from './keyType';\r\nimport { PublicKey } from './publicKey';\r\nimport { Signable } from './signable';\r\nimport { Signature } from './signature';\r\nimport { SignatureScheme } from './signatureScheme';\r\n\r\nexport class PrivateKey extends Key {\r\n  /**\r\n   * Generates random Private key using supplied Key type and parameters.\r\n   *\r\n   * If no Key type or parameters is supplied, default SDK key type with default parameters will be used.\r\n   *\r\n   * @param keyType The key type\r\n   * @param parameters The parameters for the key type\r\n   */\r\n  static random(keyType?: KeyType, parameters?: KeyParameters): PrivateKey {\r\n    if (keyType === undefined) {\r\n      keyType = KeyType.ECDSA;\r\n    }\r\n\r\n    if (parameters === undefined) {\r\n      parameters = new KeyParameters(CurveLabel.SECP256R1);\r\n    }\r\n\r\n    return new PrivateKey(randomBytes(32), keyType, parameters);\r\n  }\r\n  static deserialize(b: Buffer): PrivateKey {\r\n    const r = new Reader(b);\r\n\r\n    if (b.length === 32) {\r\n      // ECDSA\r\n      const algorithm = KeyType.ECDSA;\r\n      const curve = CurveLabel.SECP256R1;\r\n      const sk = r.readBytes(32);\r\n      return new PrivateKey(sk, algorithm, new KeyParameters(curve));\r\n    } else {\r\n      const algorithmHex = r.readByte();\r\n      const curveHex = r.readByte();\r\n      const sk = r.readBytes(32);\r\n\r\n      return new PrivateKey(sk, KeyType.fromHex(algorithmHex), new KeyParameters(CurveLabel.fromHex(curveHex)));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Derives Public key out of Private key.\r\n   */\r\n  getPublicKey(): PublicKey {\r\n    switch (this.algorithm) {\r\n      case KeyType.ECDSA:\r\n        return this.getEcDSAPublicKey();\r\n      case KeyType.EDDSA:\r\n        return this.getEdDSAPublicKey();\r\n      default:\r\n        throw new Error('Unsupported signature schema.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Signs the data with supplied private key using signature schema.\r\n   *\r\n   * If the signature schema is not provided, the default schema for this key type is used.\r\n   *\r\n   * This method is not suitable, if external keys (Ledger, TPM, ...) support is required.\r\n   *\r\n   * @param msg Hex encoded input data or Signable object\r\n   * @param schema Signing schema to use\r\n   * @param publicKeyId Id of public key\r\n   */\r\n  async sign(msg: Buffer | Signable, schema?: SignatureScheme): Promise<Signature> {\r\n    if (schema === undefined) {\r\n      schema = this.algorithm.defaultSchema;\r\n    }\r\n\r\n    if (!this.isSchemaSupported(schema)) {\r\n      throw new Error('Signature schema does not match key type.');\r\n    }\r\n\r\n    // retrieves content to sign if not provided directly\r\n    if (!(msg instanceof Buffer)) {\r\n      msg = msg.getSignContent();\r\n    }\r\n\r\n    const hash = this.computeHash(msg, schema);\r\n\r\n    const signed = this.computeSignature(hash, schema);\r\n    return new Signature(schema, signed);\r\n  }\r\n\r\n  /**\r\n   * Computes signature of message hash using specified signature schema.\r\n   *\r\n   * @param hash Message hash\r\n   * @param schema Signature schema to use\r\n   */\r\n  private computeSignature(hash: Buffer, schema: SignatureScheme): Buffer {\r\n    switch (schema) {\r\n      case SignatureScheme.ECDSAwithSHA224:\r\n      case SignatureScheme.ECDSAwithSHA256:\r\n      case SignatureScheme.ECDSAwithSHA384:\r\n      case SignatureScheme.ECDSAwithSHA512:\r\n      case SignatureScheme.ECDSAwithSHA3_224:\r\n      case SignatureScheme.ECDSAwithSHA3_256:\r\n      case SignatureScheme.ECDSAwithSHA3_384:\r\n      case SignatureScheme.ECDSAwithSHA3_512:\r\n      case SignatureScheme.ECDSAwithRIPEMD160:\r\n        return this.computeEcDSASignature(hash);\r\n      case SignatureScheme.EDDSAwithSHA512:\r\n        return this.computeEdDSASignature(hash);\r\n      default:\r\n        throw new Error('Unsupported signature schema.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Computes EcDSA signature of message hash. Curve name is derrived from private key.\r\n   *\r\n   * @param hash Message hash\r\n   */\r\n  private computeEcDSASignature(hash: Buffer): Buffer {\r\n    const ec = new elliptic.ec(this.parameters.curve.preset);\r\n    const signed = ec.sign(hash, this.key, { canonical: true, pers: undefined });\r\n    return Buffer.concat([signed.r.toArrayLike(Buffer, 'be', 32), signed.s.toArrayLike(Buffer, 'be', 32)]);\r\n  }\r\n\r\n  /**\r\n   * Computes EdDSA signature of message hash. Curve name is derrived from private key.\r\n   *\r\n   * @param hash Message hash\r\n   */\r\n  private computeEdDSASignature(hash: Buffer): Buffer {\r\n    const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\r\n    const signed = eddsa.sign(hash, this.key, null);\r\n    return Buffer.concat([signed.R.toArrayLike(Buffer, 'be', 32), signed.S.toArrayLike(Buffer, 'be', 32)]);\r\n  }\r\n\r\n  /**\r\n   * Derives Public key out of Private key using EcDSA algorithm.\r\n   */\r\n  private getEcDSAPublicKey(): PublicKey {\r\n    const ec = new elliptic.ec(this.parameters.curve.preset);\r\n    const keyPair = ec.keyFromPrivate(this.key, 'hex');\r\n    const pk = keyPair.getPublic(true, 'hex');\r\n\r\n    return new PublicKey(pk, this.algorithm, this.parameters);\r\n  }\r\n\r\n  /**\r\n   * Derives Public key out of Private key using EdDSA algorithm.\r\n   */\r\n  private getEdDSAPublicKey(): PublicKey {\r\n    const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\r\n    const keyPair = eddsa.keyFromSecret(this.key, 'hex');\r\n    const pk = keyPair.getPublic(true, 'hex');\r\n\r\n    return new PublicKey(pk, this.algorithm, this.parameters);\r\n  }\r\n}\r\n","import { createHash } from 'crypto';\r\n\r\nexport function sha256(data: Buffer) {\r\n  const sh = createHash('sha256');\r\n  sh.update(data);\r\n  return sh.digest();\r\n}\r\n\r\nexport function md160(data: Buffer) {\r\n  const sh = createHash('ripemd160');\r\n  sh.update(data);\r\n  return sh.digest();\r\n}\r\n","import * as bigInt from 'big-integer';\r\n\r\n// tslint:disable:no-bitwise\r\n\r\nexport function bigIntToBytes(data: bigInt.BigInteger) {\r\n  let bs = data.toArray(256).value;\r\n\r\n  if (data.isZero()) {\r\n    return new Buffer('');\r\n  }\r\n\r\n  const b = bs[0];\r\n\r\n  if (data.isNegative()) {\r\n    for (let i = 0; i < bs.length; i++) {\r\n      bs[i] = 255 ^ bs[i];\r\n    }\r\n\r\n    const temp = bigInt.fromArray(bs, 256);\r\n    const temp2 = temp.add(bigInt.one);\r\n    bs = temp2.toArray(256).value;\r\n\r\n    bs = bs.reverse();\r\n\r\n    if (b >> 7 === 1) {\r\n      bs = bs.concat(255);\r\n    }\r\n  } else {\r\n    bs = bs.reverse();\r\n    if (b >> 7 === 1) {\r\n      bs = bs.concat(0);\r\n    }\r\n  }\r\n\r\n  return new Buffer(bs);\r\n}\r\n\r\nexport function bigIntFromBytes(ba: Buffer): bigInt.BigInteger {\r\n  const l = ba.length;\r\n  if (l === 0) {\r\n    return bigInt.zero;\r\n  }\r\n\r\n  let bytes = Array.from(ba.subarray(0));\r\n  bytes = bytes.reverse();\r\n\r\n  if (bytes[0] >> 7 === 1) {\r\n    for (let i = 0; i < bytes.length; i++) {\r\n      bytes[i] = 255 ^ bytes[i];\r\n    }\r\n\r\n    const temp = bigInt.fromArray(bytes, 256);\r\n    const temp2 = temp.add(bigInt(1));\r\n    bytes = temp2.toArray(256).value;\r\n    return bigInt.fromArray(bytes, 256).negate();\r\n  }\r\n\r\n  return bigInt.fromArray(bytes, 256);\r\n}\r\n","export type OpCode = number;\r\n\r\nexport const PUSH0 = 0x00; // An empty array of bytes is pushed onto the stack.\r\nexport const PUSHF = PUSH0;\r\nexport const PUSHBYTES1 = 0x01; // 0x01-0x4B The next bytes is data to be pushed onto the stack\r\nexport const PUSHBYTES75 = 0x4b;\r\nexport const PUSHDATA1 = 0x4c; // The next byte contains the number of bytes to be pushed onto the stack.\r\nexport const PUSHDATA2 = 0x4d; // The next two bytes contain the number of bytes to be pushed onto the stack.\r\nexport const PUSHDATA4 = 0x4e; // The next four bytes contain the number of bytes to be pushed onto the stack.\r\nexport const PUSHM1 = 0x4f; // The number -1 is pushed onto the stack.\r\nexport const PUSH1 = 0x51; // The number 1 is pushed onto the stack.\r\nexport const PUSHT = PUSH1;\r\nexport const PUSH2 = 0x52; // The number 2 is pushed onto the stack.\r\nexport const PUSH3 = 0x53; // The number 3 is pushed onto the stack.\r\nexport const PUSH4 = 0x54; // The number 4 is pushed onto the stack.\r\nexport const PUSH5 = 0x55; // The number 5 is pushed onto the stack.\r\nexport const PUSH6 = 0x56; // The number 6 is pushed onto the stack.\r\nexport const PUSH7 = 0x57; // The number 7 is pushed onto the stack.\r\nexport const PUSH8 = 0x58; // The number 8 is pushed onto the stack.\r\nexport const PUSH9 = 0x59; // The number 9 is pushed onto the stack.\r\nexport const PUSH10 = 0x5a; // The number 10 is pushed onto the stack.\r\nexport const PUSH11 = 0x5b; // The number 11 is pushed onto the stack.\r\nexport const PUSH12 = 0x5c; // The number 12 is pushed onto the stack.\r\nexport const PUSH13 = 0x5d; // The number 13 is pushed onto the stack.\r\nexport const PUSH14 = 0x5e; // The number 14 is pushed onto the stack.\r\nexport const PUSH15 = 0x5f; // The number 15 is pushed onto the stack.\r\nexport const PUSH16 = 0x60; // The number 16 is pushed onto the stack.\r\n// Flow control\r\nexport const NOP = 0x61; // Does nothing.\r\nexport const JMP = 0x62;\r\nexport const JMPIF = 0x63;\r\nexport const JMPIFNOT = 0x64;\r\nexport const CALL = 0x65;\r\nexport const RET = 0x66;\r\nexport const APPCALL = 0x67;\r\nexport const SYSCALL = 0x68;\r\nexport const TAILCALL = 0x69;\r\nexport const DUPFROMALTSTACK = 0x6a;\r\n// Stack\r\nexport const TOALTSTACK = 0x6b; // Puts the input onto the top of the alt stack. Removes it from the main stack.\r\nexport const FROMALTSTACK = 0x6c; // Puts the input onto the top of the main stack. Removes it from the alt stack.\r\nexport const XDROP = 0x6d;\r\nexport const XSWAP = 0x72;\r\nexport const XTUCK = 0x73;\r\nexport const DEPTH = 0x74; // Puts the number of stack items onto the stack.\r\nexport const DROP = 0x75; // Removes the top stack item.\r\nexport const DUP = 0x76; // Duplicates the top stack item.\r\nexport const NIP = 0x77; // Removes the second-to-top stack item.\r\nexport const OVER = 0x78; // Copies the second-to-top stack item to the top.\r\nexport const PICK = 0x79; // The item n back in the stack is copied to the top.\r\nexport const ROLL = 0x7a; // The item n back in the stack is moved to the top.\r\nexport const ROT = 0x7b; // The top three items on the stack are rotated to the left.\r\nexport const SWAP = 0x7c; // The top two items on the stack are swapped.\r\nexport const TUCK = 0x7d; // The item at the top of the stack is copied and inserted before the second-to-top item.\r\n// Splice\r\nexport const CAT = 0x7e; // Concatenates two strings.\r\nexport const SUBSTR = 0x7f; // Returns a section of a string.\r\nexport const LEFT = 0x80; // Keeps only characters left of the specified point in a string.\r\nexport const RIGHT = 0x81; // Keeps only characters right of the specified point in a string.\r\nexport const SIZE = 0x82; // Returns the length of the input string.\r\n// Bitwise logic\r\nexport const INVERT = 0x83; // Flips all of the bits in the input.\r\nexport const AND = 0x84; // Boolean and between each bit in the inputs.\r\nexport const OR = 0x85; // Boolean or between each bit in the inputs.\r\nexport const XOR = 0x86; // Boolean exclusive or between each bit in the inputs.\r\nexport const EQUAL = 0x87; // Returns 1 if the inputs are exactly equal, 0 otherwise.\r\n// export const EQUALVERIFY = 0x88; // Same as EQUAL, but runs VERIFY afterward.\r\n// export const RESERVED1 = 0x89; // Transaction is invalid unless occuring in an unexecuted IF branch\r\n// export const RESERVED2 = 0x8A; // Transaction is invalid unless occuring in an unexecuted IF branch\r\n\r\n// Arithmetic\r\n// Note: Arithmetic inputs are limited to signed 32-bit integers, but may overflow their output.\r\nexport const INC = 0x8b; // 1 is added to the input.\r\nexport const DEC = 0x8c; // 1 is subtracted from the input.\r\nexport const SIGN = 0x8d;\r\n// export const SAL           = 0x8D; // The input is multiplied by 2.\r\n// export const SAR           = 0x8E; // The input is divided by 2.\r\nexport const NEGATE = 0x8f; // The sign of the input is flipped.\r\nexport const ABS = 0x90; // The input is made positive.\r\nexport const NOT = 0x91; // If the input is 0 or 1, it is flipped. Otherwise the output will be 0.\r\nexport const NZ = 0x92; // Returns 0 if the input is 0. 1 otherwise.\r\nexport const ADD = 0x93; // a is added to b.\r\nexport const SUB = 0x94; // b is subtracted from a.\r\nexport const MUL = 0x95; // a is multiplied by b.\r\nexport const DIV = 0x96; // a is divided by b.\r\nexport const MOD = 0x97; // Returns the remainder after dividing a by b.\r\nexport const SHL = 0x98; // Shifts a left b bits, preserving sign.\r\nexport const SHR = 0x99; // Shifts a right b bits, preserving sign.\r\nexport const BOOLAND = 0x9a; // If both a and b are not 0, the output is 1. Otherwise 0.\r\nexport const BOOLOR = 0x9b; // If a or b is not 0, the output is 1. Otherwise 0.\r\nexport const NUMEQUAL = 0x9c; // Returns 1 if the numbers are equal, 0 otherwise.\r\nexport const NUMNOTEQUAL = 0x9e; // Returns 1 if the numbers are not equal, 0 otherwise.\r\nexport const LT = 0x9f; // Returns 1 if a is less than b, 0 otherwise.\r\nexport const GT = 0xa0; // Returns 1 if a is greater than b, 0 otherwise.\r\nexport const LTE = 0xa1; // Returns 1 if a is less than or equal to b, 0 otherwise.\r\nexport const GTE = 0xa2; // Returns 1 if a is greater than or equal to b, 0 otherwise.\r\nexport const MIN = 0xa3; // Returns the smaller of a and b.\r\nexport const MAX = 0xa4; // Returns the larger of a and b.\r\nexport const WITHIN = 0xa5; // Returns 1 if x is within the specified range (left-inclusive), 0 otherwise.\r\n// Crypto\r\n// export const RIPEMD160 = 0xA6; // The input is hashed using RIPEMD-160.\r\nexport const SHA1 = 0xa7; // The input is hashed using SHA-1.\r\nexport const SHA256 = 0xa8; // The input is hashed using SHA-256.\r\nexport const HASH160 = 0xa9;\r\nexport const HASH256 = 0xaa;\r\n// tslint:disable-next-line:max-line-length\r\nexport const CHECKSIG = 0xac; // The entire transaction's outputs inputs and script (from the most recently-executed CODESEPARATOR to the end) are hashed. The signature used by CHECKSIG must be a valid signature for this hash and public key. If it is 1 is returned 0 otherwise.\r\nexport const VERIFY = 0xad;\r\n// tslint:disable-next-line:max-line-length\r\nexport const CHECKMULTISIG = 0xae; // For each signature and public key pair CHECKSIG is executed. If more public keys than signatures are listed some key/sig pairs can fail. All signatures need to match a public key. If all signatures are valid 1 is returned 0 otherwise. Due to a bug one extra unused value is removed from the stack.\r\n// Array\r\n// tslint:disable:indent\r\nexport const ARRAYSIZE = 0xc0;\r\nexport const PACK = 0xc1;\r\nexport const UNPACK = 0xc2;\r\nexport const PICKITEM = 0xc3;\r\nexport const SETITEM = 0xc4;\r\nexport const NEWARRAY = 0xc5;\r\nexport const NEWSTRUCT = 0xc6;\r\nexport const NEWMAP = 0xc7;\r\nexport const APPEND = 0xc8;\r\nexport const REVERSE = 0xc9;\r\nexport const REMOVE = 0xca;\r\nexport const HASKEY = 0xcb;\r\nexport const KEYS = 0xcc;\r\nexport const VALUES = 0xcd;\r\n// Exception\r\nexport const THROW = 0xf0;\r\nexport const THROWIFNOT = 0xf1;\r\n","import * as bigInt from 'big-integer';\r\nimport * as Long from 'long';\r\nimport { PublicKey } from '../crypto/publicKey';\r\nimport { bigIntToBytes } from '../utils/serialize';\r\nimport { Writer } from '../utils/writer';\r\nimport * as O from './opCode';\r\n\r\nexport class ProgramBuilder {\r\n  w: Writer;\r\n\r\n  constructor() {\r\n    this.w = new Writer();\r\n  }\r\n\r\n  pushPubKey(key: PublicKey) {\r\n    this.pushBytes(key.serialize());\r\n  }\r\n\r\n  writeOpCode(opCode: O.OpCode) {\r\n    this.w.writeUint8(opCode);\r\n  }\r\n\r\n  writeByte(val: number) {\r\n    this.w.writeUint8(val);\r\n  }\r\n\r\n  writeBytes(b: Buffer) {\r\n    this.w.writeBytes(b);\r\n  }\r\n\r\n  writeVarUInt(val: Long) {\r\n    this.w.writeVarUint(val);\r\n  }\r\n\r\n  pushBytes(data: Buffer) {\r\n    // pushing empty buffer should not do any damage\r\n    // if (data.length === 0) {\r\n    //   throw new Error('push data error: data is nil');\r\n    // }\r\n\r\n    if (data.length <= O.PUSHBYTES75 + 1 - O.PUSHBYTES1) {\r\n      this.w.writeUint8(data.length + O.PUSHBYTES1 - 1);\r\n    } else if (data.length < 0x100) {\r\n      this.w.writeUint8(O.PUSHDATA1);\r\n      this.w.writeUint8(data.length);\r\n    } else if (data.length < 0x10000) {\r\n      this.w.writeUint8(O.PUSHDATA2);\r\n      this.w.writeUint16(data.length);\r\n    } else {\r\n      this.w.writeUint8(O.PUSHDATA4);\r\n      this.w.writeUint32(data.length);\r\n    }\r\n    this.w.writeBytes(data);\r\n  }\r\n\r\n  pushNum(num: number | Long) {\r\n    if (typeof num === 'number') {\r\n      num = Long.fromNumber(num);\r\n    }\r\n\r\n    if (num.eq(-1)) {\r\n      this.writeOpCode(O.PUSHM1);\r\n    } else if (num.isZero()) {\r\n      this.writeOpCode(O.PUSH0);\r\n    } else if (num.gt(0) && num.lt(16)) {\r\n      this.writeOpCode(num.toNumber() - 1 + O.PUSH1);\r\n    } else {\r\n      this.pushBytes(bigIntToBytes(bigInt(num.toString())));\r\n    }\r\n  }\r\n\r\n  pushBool(param: boolean) {\r\n    if (param) {\r\n      this.writeOpCode(O.PUSHT);\r\n    } else {\r\n      this.writeOpCode(O.PUSHF);\r\n    }\r\n  }\r\n  getProgram(): Buffer {\r\n    return this.w.getBytes();\r\n  }\r\n}\r\n\r\nexport function programFromPubKey(key: PublicKey): Buffer {\r\n  const b = new ProgramBuilder();\r\n  b.pushPubKey(key);\r\n  b.writeOpCode(O.CHECKSIG);\r\n  return b.getProgram();\r\n}\r\n\r\nexport function programFromMultiPubKeys(m: number, keys: PublicKey[]): Buffer {\r\n  if (m === 1) {\r\n    return programFromPubKey(keys[0]);\r\n  }\r\n\r\n  const n = keys.length;\r\n  if (!(1 <= m && m <= n && n <= 1024)) {\r\n    throw new Error('Wrong multi-sig param');\r\n  }\r\n\r\n  keys.sort(PublicKey.compare);\r\n\r\n  const b = new ProgramBuilder();\r\n\r\n  b.pushNum(m);\r\n\r\n  keys.forEach((key) => {\r\n    b.pushPubKey(key);\r\n  });\r\n\r\n  b.pushNum(n);\r\n\r\n  b.writeOpCode(O.CHECKMULTISIG);\r\n  return b.getProgram();\r\n}\r\n\r\nexport function programFromParams(sigs: Buffer[]) {\r\n  const b = new ProgramBuilder();\r\n\r\n  for (const s of sigs) {\r\n    b.pushBytes(s);\r\n  }\r\n\r\n  return b.getProgram();\r\n}\r\n","import * as base58 from 'bs58';\r\nimport { PublicKey } from '../crypto/publicKey';\r\nimport { md160, sha256 } from '../utils/hash';\r\nimport { programFromPubKey } from '../utils/program';\r\nimport { Reader } from '../utils/reader';\r\nimport { Writer } from '../utils/writer';\r\nimport { ADDR_LEN } from './consts';\r\n\r\nexport class Address {\r\n  static deserialize(b: Buffer) {\r\n    const r = new Reader(b);\r\n\r\n    try {\r\n      const value = r.readBytes(ADDR_LEN);\r\n      return new Address(value);\r\n    } catch (e) {\r\n      throw new Error('deserialize Uint256 error');\r\n    }\r\n  }\r\n\r\n  static fromVmCode(code: Buffer): Address {\r\n    return new Address(md160(sha256(code)));\r\n  }\r\n\r\n  static fromPubKey(key: PublicKey): Address {\r\n    const prog = programFromPubKey(key);\r\n\r\n    return Address.fromVmCode(prog);\r\n  }\r\n\r\n  static fromBase58(encoded: string): Address {\r\n    const decoded = base58.decode(encoded);\r\n    const hexDecoded = new Buffer(decoded).slice(1, 20 + 1);\r\n\r\n    const address = new Address(hexDecoded);\r\n\r\n    if (encoded !== address.toBase58()) {\r\n      throw new Error('[Address.fromBase58] decode encoded verify failed');\r\n    }\r\n    return address;\r\n  }\r\n\r\n  private value: Buffer;\r\n\r\n  constructor(value: Buffer | string = '0000000000000000000000000000000000000000') {\r\n    if (typeof value === 'string') {\r\n      this.value = new Buffer(value, 'hex');\r\n    } else {\r\n      this.value = value;\r\n    }\r\n  }\r\n\r\n  equals(other: Address): boolean {\r\n    return this.value.equals(other.value);\r\n  }\r\n\r\n  serialize(w: Writer) {\r\n    w.writeBytes(this.value);\r\n  }\r\n\r\n  toArray() {\r\n    const buffer = new Buffer(this.value.length);\r\n    this.value.copy(buffer);\r\n    return buffer;\r\n  }\r\n\r\n  toBase58(): string {\r\n    const data = Buffer.concat([new Buffer('17', 'hex'), this.value]);\r\n    const hash = sha256(data);\r\n    const hash2 = sha256(hash);\r\n    const checksum = hash2.slice(0, 4);\r\n\r\n    const datas = Buffer.concat([data, checksum]);\r\n\r\n    return base58.encode(datas);\r\n  }\r\n\r\n  toOntId() {\r\n    return 'did:ont:' + this.toBase58();\r\n  }\r\n}\r\n","import { createCipheriv, createDecipheriv, ScryptOptions } from 'crypto';\r\nimport * as asyncScrypt from 'scrypt-async';\r\n\r\nexport interface ScryptOptionsEx extends ScryptOptions {\r\n  keyLength: number;\r\n}\r\n\r\nexport const DEFAULT_SCRYPT: ScryptOptionsEx = {\r\n  N: 4096,\r\n  r: 8,\r\n  p: 8,\r\n  keyLength: 64\r\n};\r\n\r\nexport const DEFAULT_SCRYPT_KEYLENGTH = 64;\r\n\r\nexport function decryptWithGcm(\r\n  encrypted: string,\r\n  address: string,\r\n  salt: Buffer,\r\n  keyphrase: string,\r\n  scryptParams: ScryptOptionsEx\r\n) {\r\n  const { keyLength, ...scryptOptions } = scryptParams;\r\n\r\n  const result = Buffer.from(encrypted, 'base64');\r\n  const ciphertext = result.slice(0, result.length - 16);\r\n  const authTag = result.slice(result.length - 16);\r\n  const derived = scryptSync(keyphrase.normalize('NFC'), salt, keyLength, scryptOptions);\r\n  const derived1 = derived.slice(0, 12);\r\n  const derived2 = derived.slice(32);\r\n  const key = derived2;\r\n  const iv = derived1;\r\n  const aad = new Buffer(address);\r\n\r\n  const decipher = createDecipheriv('aes-256-gcm', key, iv);\r\n  decipher.setAAD(aad);\r\n  decipher.setAuthTag(authTag);\r\n  let decrypted = decipher.update(ciphertext).toString('hex');\r\n\r\n  try {\r\n    decrypted += decipher.final().toString('hex');\r\n  } catch (err) {\r\n    throw new Error('Password incorrect');\r\n  }\r\n  return decrypted;\r\n}\r\n\r\n/**\r\n * Encrypt with aes-gcm-256\r\n * This is the default encryption algorithm for private key\r\n * @param privateKey Private key to encpryt with\r\n * @param address Adderss to encrypt with\r\n * @param salt Salt to encrypt with\r\n * @param keyphrase User's password\r\n * @param scryptParams Optional params to encrypt\r\n */\r\nexport function encryptWithGcm(\r\n  privateKey: Buffer,\r\n  address: string,\r\n  salt: Buffer,\r\n  keyphrase: string,\r\n  scryptParams: ScryptOptionsEx\r\n) {\r\n  const { keyLength, ...scryptOptions } = scryptParams;\r\n\r\n  const derived = scryptSync(keyphrase.normalize('NFC'), salt, keyLength, scryptOptions);\r\n  const derived1 = derived.slice(0, 12);\r\n  const derived2 = derived.slice(32);\r\n  const key = derived2;\r\n  const iv = derived1;\r\n  const aad = new Buffer(address);\r\n  const cipher = createCipheriv('aes-256-gcm', key, iv);\r\n  cipher.setAAD(aad);\r\n  let ciphertext = cipher.update(privateKey);\r\n  // ciphertext += cipher.final();\r\n  const final = cipher.final();\r\n  const authTag = cipher.getAuthTag();\r\n  ciphertext = Buffer.concat([ciphertext, final]);\r\n\r\n  const result = Buffer.concat([ciphertext, authTag]);\r\n  return result.toString('base64');\r\n}\r\n\r\n/**\r\n * Synchronious call to scrypt-async-js.\r\n *\r\n * @param keyphrase Keyphrase to use\r\n * @param addressHash Hex encoded address\r\n * @param params Scrypt params\r\n */\r\nfunction scryptSync(keyphrase: string, salt: Buffer, keyLength: number, params: ScryptOptions) {\r\n  let derived: number[] = [];\r\n\r\n  const s = Array.from(salt.subarray(0));\r\n  asyncScrypt(\r\n    keyphrase.normalize('NFC'),\r\n    s,\r\n    {\r\n      N: params.N,\r\n      r: params.r!,\r\n      p: params.p!,\r\n      dkLen: keyLength\r\n    },\r\n    (result: string | number[]) => {\r\n      derived = result as number[];\r\n    }\r\n  );\r\n  return new Buffer(derived);\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { toSeedHex, validateMnemonic } from 'bip39-lite';\r\nimport { randomBytes } from 'crypto';\r\nimport { HDKey } from 'hdkey-secp256r1';\r\nimport { Address } from '../crypto/address';\r\nimport { KeyParameters } from '../crypto/key';\r\nimport { KeyType } from '../crypto/keyType';\r\nimport { PrivateKey } from '../crypto/privateKey';\r\nimport { PublicKey } from '../crypto/publicKey';\r\nimport { decryptWithGcm, DEFAULT_SCRYPT, encryptWithGcm, ScryptOptionsEx } from './scrypt';\r\n\r\n// tslint:disable:quotemark\r\n// tslint:disable:object-literal-key-quotes\r\n\r\nexport const ONT_BIP44_PATH = \"m/44'/1024'/0'/0/0\";\r\n\r\nexport class Account {\r\n  /**\r\n   * Import account\r\n   * @param label Account's label\r\n   * @param encryptedKey Encrypted private key\r\n   * @param password User's password to decrypt private key\r\n   * @param address Account's address\r\n   * @param saltBase64 Salt to decrypt\r\n   * @param params Params used to decrypt\r\n   */\r\n  static import(\r\n    label: string,\r\n    privateKey: PrivateKey,\r\n    password: string,\r\n    salt: Buffer = randomBytes(16),\r\n    scrypt: ScryptOptionsEx = DEFAULT_SCRYPT\r\n  ) {\r\n    const account = new Account();\r\n\r\n    if (!label) {\r\n      label = randomBytes(4).toString('hex');\r\n    }\r\n    account.label = label;\r\n    account.lock = false;\r\n    account.isDefault = false;\r\n    account.salt = salt.toString('base64');\r\n    account.scrypt = scrypt;\r\n\r\n    account.publicKey = privateKey.getPublicKey();\r\n    account.address = Address.fromPubKey(account.publicKey);\r\n    account.encryptedKey = encryptWithGcm(privateKey.key, account.address.toBase58(), salt, password, scrypt);\r\n\r\n    if (!account.address.equals(account.address)) {\r\n      throw new Error('Computed address does not match the provided address.');\r\n    }\r\n\r\n    return account;\r\n  }\r\n\r\n  /**\r\n   * Import account with mnemonic\r\n   * @param label Account's label\r\n   * @param mnemonic User's mnemonic\r\n   * @param password user's password to encrypt the private key\r\n   * @param params Params used to encrypt the private key.\r\n   */\r\n  static importMnemonic(label: string, mnemonic: string, password: string, scrypt: ScryptOptionsEx = DEFAULT_SCRYPT) {\r\n    mnemonic = mnemonic.trim();\r\n    if (!validateMnemonic(mnemonic)) {\r\n      throw new Error('Invalid mnemonics');\r\n    }\r\n    const seed = toSeedHex(mnemonic);\r\n    const hdkey = HDKey.fromMasterSeed(Buffer.from(seed, 'hex'));\r\n    const pri = hdkey.derive(ONT_BIP44_PATH);\r\n    const key = Buffer.from(pri.privateKey!).toString('hex');\r\n    const privateKey = new PrivateKey(key);\r\n    const account = Account.create(label, privateKey, password, scrypt);\r\n    return account;\r\n  }\r\n\r\n  /**\r\n   * Creates Account object encrypting specified private key.\r\n   *\r\n   * The account does not need to be registered on blockchain.\r\n   *\r\n   * @param privateKey Private key associated with the account\r\n   * @param password Password use to encrypt the private key\r\n   * @param label Custom label\r\n   * @param params Optional scrypt params\r\n   */\r\n  static create(label: string, privateKey: PrivateKey, password: string, scrypt: ScryptOptionsEx = DEFAULT_SCRYPT) {\r\n    const account = new Account();\r\n    const salt = randomBytes(16);\r\n    const publicKey = privateKey.getPublicKey();\r\n    const address = Address.fromPubKey(publicKey);\r\n\r\n    account.label = label;\r\n    account.lock = false;\r\n    account.isDefault = false;\r\n    account.publicKey = publicKey;\r\n    account.address = address;\r\n    account.encryptedKey = encryptWithGcm(privateKey.key, address.toBase58(), salt, password, scrypt);\r\n    account.salt = salt.toString('base64');\r\n    account.scrypt = scrypt;\r\n\r\n    return account;\r\n  }\r\n\r\n  /**\r\n   * Deserializes JSON object.\r\n   *\r\n   * Object should be real object, not stringified.\r\n   *\r\n   * @param obj JSON object or string\r\n   */\r\n  static deserializeJson(obj: any, scrypt: ScryptOptionsEx = DEFAULT_SCRYPT): Account {\r\n    if (typeof obj === 'string') {\r\n      obj = JSON.parse(obj);\r\n    }\r\n\r\n    const pk = new PublicKey(\r\n      new Buffer(obj.publicKey, 'hex'),\r\n      KeyType.fromLabel(obj.algorithm),\r\n      KeyParameters.deserializeJson(obj.parameters)\r\n    );\r\n\r\n    const account = new Account();\r\n    account.address = Address.fromBase58(obj.address);\r\n    account.label = obj.label;\r\n    account.lock = obj.lock;\r\n    account.isDefault = obj.isDefault;\r\n    account.publicKey = pk;\r\n    account.hash = obj.hash;\r\n    account.salt = obj.salt;\r\n    account.encryptedKey = obj.key;\r\n    account.extra = obj.extra;\r\n    account.scrypt = scrypt;\r\n    return account;\r\n  }\r\n\r\n  address: Address;\r\n  label: string;\r\n  lock: boolean;\r\n  encryptedKey: string;\r\n  extra: null;\r\n\r\n  // to be compatible with cli wallet\r\n  'enc-alg': string = 'aes-256-gcm';\r\n  hash: string = 'sha256';\r\n  salt: string;\r\n\r\n  publicKey: PublicKey;\r\n  isDefault: boolean;\r\n\r\n  scrypt: ScryptOptionsEx;\r\n\r\n  /**\r\n   * Serializes to JSON object.\r\n   *\r\n   * Returned object will not be stringified.\r\n   *\r\n   */\r\n  serializeJson(stringify: boolean = false): any {\r\n    const obj = {\r\n      address: this.address.toBase58(),\r\n      label: this.label,\r\n      lock: this.lock,\r\n      extra: this.extra,\r\n      key: this.encryptedKey,\r\n      'enc-alg': this['enc-alg'],\r\n      hash: this.hash,\r\n      salt: this.salt,\r\n      isDefault: this.isDefault,\r\n      publicKey: this.publicKey.serialize().toString('hex'),\r\n      algorithm: this.publicKey.algorithm.label,\r\n      parameters: this.publicKey.parameters.serializeJson()\r\n    };\r\n\r\n    if (stringify) {\r\n      return JSON.stringify(obj);\r\n    } else {\r\n      return obj;\r\n    }\r\n  }\r\n\r\n  decryptKey(password: string): PrivateKey | Promise<PrivateKey> {\r\n    const salt = Buffer.from(this.salt, 'base64');\r\n    const sk = decryptWithGcm(this.encryptedKey, this.address.toBase58(), salt, password, this.scrypt);\r\n    return new PrivateKey(sk, this.publicKey.algorithm, this.publicKey.parameters);\r\n  }\r\n}\r\n","import { randomBytes } from 'crypto';\r\nimport { Address } from '../crypto/address';\r\nimport { KeyParameters } from '../crypto/key';\r\nimport { KeyType } from '../crypto/keyType';\r\nimport { PrivateKey } from '../crypto/privateKey';\r\nimport { PublicKey } from '../crypto/publicKey';\r\nimport { decryptWithGcm, DEFAULT_SCRYPT, encryptWithGcm, ScryptOptionsEx } from './scrypt';\r\n\r\n// tslint:disable:quotemark\r\n// tslint:disable:object-literal-key-quotes\r\n\r\nexport interface ControlData {\r\n  /**\r\n   * Id of control data\r\n   */\r\n  id: string;\r\n  /**\r\n   * Encrypted private key\r\n   */\r\n  encryptedKey: string;\r\n  /**\r\n   * Address of control data\r\n   */\r\n  address: Address;\r\n\r\n  'enc-alg': string;\r\n\r\n  /**\r\n   * Salt of control data\r\n   */\r\n  salt: string;\r\n  /**\r\n   * hash type\r\n   */\r\n  hash: string;\r\n  /**\r\n   * The public key\r\n   */\r\n  publicKey: PublicKey;\r\n}\r\n\r\nexport class Identity {\r\n  /**\r\n   * Import identity\r\n   * @param label Name of identity\r\n   * @param encryptedPrivateKey Encrypted private key\r\n   * @param password User's password to decrypt\r\n   * @param address Address to decrypt\r\n   * @param saltBase64 Salt to decrypt\r\n   * @param params Optional params to decrypt\r\n   */\r\n  static importIdentity(\r\n    label: string,\r\n    privateKey: PrivateKey,\r\n    password: string,\r\n    salt: Buffer = randomBytes(16),\r\n    scrypt: ScryptOptionsEx = DEFAULT_SCRYPT\r\n  ) {\r\n    const identity = new Identity();\r\n\r\n    if (!label) {\r\n      label = randomBytes(4).toString('hex');\r\n    }\r\n\r\n    // ontid\r\n    const publicKey = privateKey.getPublicKey();\r\n    const address = Address.fromPubKey(publicKey);\r\n\r\n    const controlData = {\r\n      id: '1', // start from 1\r\n      encryptedKey: encryptWithGcm(privateKey.key, address.toBase58(), salt, password, scrypt),\r\n      address,\r\n      salt: salt.toString('base64'),\r\n      hash: 'sha256',\r\n      'enc-alg': 'aes-256-gcm',\r\n      publicKey,\r\n      scrypt\r\n    };\r\n\r\n    identity.label = label;\r\n    identity.lock = false;\r\n    identity.isDefault = false;\r\n    identity.ontid = Address.fromPubKey(publicKey).toOntId();\r\n    identity.controls = [controlData];\r\n    identity.scrypt = scrypt;\r\n\r\n    return identity;\r\n  }\r\n\r\n  /**\r\n   * Creates Identity object encrypting specified private key.\r\n   *\r\n   * The identity is not registered on the blockchain. Caller needs to register it.\r\n   *\r\n   * @param label Custom label\r\n   * @param privateKey Private key associated with the identity\r\n   * @param password Password use to encrypt the private key\r\n   * @param scrypt Optional scrypt params\r\n   */\r\n  static create(label: string, privateKey: PrivateKey, password: string, scrypt: ScryptOptionsEx = DEFAULT_SCRYPT) {\r\n    const identity = new Identity();\r\n\r\n    // ontid\r\n    const salt = randomBytes(16);\r\n    const publicKey = privateKey.getPublicKey();\r\n    const address = Address.fromPubKey(publicKey);\r\n\r\n    const controlData = {\r\n      id: '1', // start from 1\r\n      encryptedKey: encryptWithGcm(privateKey.key, address.toBase58(), salt, password, scrypt),\r\n      address,\r\n      salt: salt.toString('base64'),\r\n      hash: 'sha256',\r\n      'enc-alg': 'aes-256-gcm',\r\n      publicKey\r\n    };\r\n\r\n    identity.label = label;\r\n    identity.lock = false;\r\n    identity.isDefault = false;\r\n    identity.ontid = Address.fromPubKey(publicKey).toOntId();\r\n    identity.controls = [controlData];\r\n    identity.scrypt = scrypt;\r\n\r\n    return identity;\r\n  }\r\n\r\n  static deserializeControlsJson(obj: any[]): ControlData[] {\r\n    return obj.map((control) => {\r\n      const pk = new PublicKey(\r\n        new Buffer(control.publicKey, 'hex'),\r\n        KeyType.fromLabel(control.algorithm),\r\n        KeyParameters.deserializeJson(control.parameters)\r\n      );\r\n\r\n      return {\r\n        id: control.id,\r\n        encryptedKey: control.key,\r\n        address: Address.fromBase58(control.address),\r\n        salt: control.salt,\r\n        hash: control.hash,\r\n        'enc-alg': control['enc-alg'],\r\n        publicKey: pk\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deserializes JSON object.\r\n   *\r\n   * Object should be real object, not stringified.\r\n   *\r\n   * @param obj JSON object or string\r\n   */\r\n  static deserializeJson(obj: any, scrypt: ScryptOptionsEx = DEFAULT_SCRYPT) {\r\n    if (typeof obj === 'string') {\r\n      obj = JSON.parse(obj);\r\n    }\r\n\r\n    const identity = new Identity();\r\n    identity.label = obj.label;\r\n    identity.lock = obj.lock;\r\n    identity.ontid = obj.ontid;\r\n    identity.isDefault = obj.isDefault;\r\n    identity.extra = obj.extra;\r\n    identity.controls = Identity.deserializeControlsJson(obj.controls);\r\n    identity.scrypt = scrypt;\r\n\r\n    return identity;\r\n  }\r\n\r\n  ontid: string;\r\n  label: string;\r\n  lock: boolean;\r\n  isDefault: boolean;\r\n  controls: ControlData[] = [];\r\n  extra: null;\r\n  scrypt: ScryptOptionsEx;\r\n\r\n  serializeControlsJson(stringify: boolean = false): any {\r\n    const obj = this.controls.map((control) => ({\r\n      key: control.encryptedKey,\r\n      id: control.id,\r\n      address: control.address.toBase58(),\r\n      salt: control.salt,\r\n      'enc-alg': (control as any)['enc-alg'],\r\n      hash: control.hash,\r\n      publicKey: control.publicKey.serialize().toString('hex'),\r\n      algorithm: control.publicKey.algorithm.label,\r\n      parameters: control.publicKey.parameters.serializeJson()\r\n    }));\r\n\r\n    if (stringify) {\r\n      return JSON.stringify(obj);\r\n    } else {\r\n      return obj;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Serializes to JSON object.\r\n   *\r\n   * Returned object will not be stringified.\r\n   *\r\n   */\r\n  serializeJson(stringify: boolean = false): any {\r\n    const obj = {\r\n      ontid: this.ontid,\r\n      label: this.label,\r\n      lock: this.lock,\r\n      isDefault: this.isDefault,\r\n      extra: this.extra,\r\n      controls: this.serializeControlsJson(false)\r\n    };\r\n\r\n    if (stringify) {\r\n      return JSON.stringify(obj);\r\n    } else {\r\n      return obj;\r\n    }\r\n  }\r\n\r\n  decryptKey(id: string, password: string): PrivateKey | Promise<PrivateKey> {\r\n    const control = this.controls.find((c) => c.id === id);\r\n    if (control === undefined) {\r\n      throw new Error('ControlData not found.');\r\n    }\r\n\r\n    const salt = Buffer.from(control.salt, 'base64');\r\n    const sk = decryptWithGcm(control.encryptedKey, control.address.toBase58(), salt, password, this.scrypt);\r\n    return new PrivateKey(sk, control.publicKey.algorithm, control.publicKey.parameters);\r\n  }\r\n}\r\n","import { Address } from '../crypto/address';\r\nimport { Account } from './account';\r\nimport { Identity } from './identity';\r\nimport { DEFAULT_SCRYPT, DEFAULT_SCRYPT_KEYLENGTH, ScryptOptionsEx } from './scrypt';\r\n\r\nexport class Wallet {\r\n  static constructAddress(address: string | Address) {\r\n    let addr: Address;\r\n\r\n    if (typeof address === 'string') {\r\n      if (address.length === 40) {\r\n        addr = new Address(address);\r\n      } else {\r\n        addr = Address.fromBase58(address);\r\n      }\r\n    } else {\r\n      addr = address;\r\n    }\r\n\r\n    return addr;\r\n  }\r\n  static create() {\r\n    const wallet = new Wallet();\r\n    wallet.name = name;\r\n    wallet.accounts = [];\r\n    wallet.identities = [];\r\n\r\n    // createtime\r\n    wallet.createTime = new Date().toISOString();\r\n    wallet.version = '1.0';\r\n    wallet.scrypt = DEFAULT_SCRYPT;\r\n    wallet.keyLength = DEFAULT_SCRYPT_KEYLENGTH;\r\n\r\n    return wallet;\r\n  }\r\n\r\n  static deserializeJson(obj: any) {\r\n    if (typeof obj === 'string') {\r\n      obj = JSON.parse(obj);\r\n    }\r\n\r\n    const wallet = new Wallet();\r\n    wallet.name = obj.name;\r\n    wallet.defaultOntid = obj.defaultOntid;\r\n    wallet.defaultAccountAddress = obj.defaultAccountAddress;\r\n    wallet.createTime = obj.createTime;\r\n    wallet.version = obj.version;\r\n    wallet.scrypt = {\r\n      N: obj.scrypt.n,\r\n      r: obj.scrypt.r,\r\n      p: obj.scrypt.p,\r\n      keyLength: obj.scrypt.dkLen\r\n    };\r\n\r\n    wallet.identities =\r\n      obj.identities !== undefined\r\n        ? (obj.identities as any[]).map((i) => Identity.deserializeJson(i, wallet.scrypt))\r\n        : [];\r\n    wallet.accounts =\r\n      obj.accounts !== undefined ? (obj.accounts as any[]).map((a) => Account.deserializeJson(a, wallet.scrypt)) : [];\r\n    wallet.extra = obj.extra;\r\n    return wallet;\r\n  }\r\n\r\n  name: string;\r\n  defaultOntid: string;\r\n  defaultAccountAddress: string;\r\n  createTime: string;\r\n  version: string;\r\n  scrypt: ScryptOptionsEx;\r\n  keyLength: number;\r\n  identities: Identity[];\r\n  accounts: Account[];\r\n  extra: null;\r\n\r\n  addAccount(account: Account) {\r\n    for (const ac of this.accounts) {\r\n      if (ac.address.equals(account.address)) {\r\n        return;\r\n      }\r\n    }\r\n    this.accounts.push(account);\r\n  }\r\n\r\n  delAccount(address: string | Address) {\r\n    const addr = Wallet.constructAddress(address);\r\n\r\n    this.accounts = this.accounts.filter((account) => !account.address.equals(addr));\r\n  }\r\n\r\n  getAccount(address: string | Address) {\r\n    const addr = Wallet.constructAddress(address);\r\n\r\n    return this.accounts.find((account) => account.address.equals(addr));\r\n  }\r\n\r\n  addIdentity(identity: Identity) {\r\n    for (const i of this.identities) {\r\n      if (i.ontid === identity.ontid) {\r\n        return;\r\n      }\r\n    }\r\n    this.identities.push(identity);\r\n  }\r\n\r\n  delIdentity(ontid: string) {\r\n    this.identities = this.identities.filter((identity) => !(identity.ontid === ontid));\r\n  }\r\n\r\n  getIdentity(ontid: string) {\r\n    return this.identities.find((identity) => identity.ontid === ontid);\r\n  }\r\n\r\n  setDefaultAccount(address: string): void {\r\n    this.defaultAccountAddress = address;\r\n  }\r\n\r\n  setDefaultIdentity(ontid: string): void {\r\n    this.defaultOntid = ontid;\r\n  }\r\n\r\n  /**\r\n   * Serializes to JSON object.\r\n   *\r\n   *\r\n   */\r\n  serializeJson(stringify: boolean = false): any {\r\n    const obj = {\r\n      name: this.name,\r\n      defaultOntid: this.defaultOntid,\r\n      defaultAccountAddress: this.defaultAccountAddress,\r\n      createTime: this.createTime,\r\n      version: this.version,\r\n      scrypt: {\r\n        n: this.scrypt.N,\r\n        r: this.scrypt.r,\r\n        p: this.scrypt.p,\r\n        dkLen: this.scrypt.keyLength\r\n      },\r\n      identities: this.identities.map((i) => i.serializeJson(false)),\r\n      accounts: this.accounts.map((a) => a.serializeJson(false)),\r\n      extra: null\r\n    };\r\n\r\n    if (stringify) {\r\n      return JSON.stringify(obj);\r\n    } else {\r\n      return obj;\r\n    }\r\n  }\r\n}\r\n","export { CurveLabel } from './crypto/curveLabel';\r\nexport { Key } from './crypto/key';\r\nexport { PublicKey } from './crypto/publicKey';\r\nexport { PrivateKey } from './crypto/privateKey';\r\nexport { Signature } from './crypto/signature';\r\nexport { Signable } from './crypto/signable';\r\nexport { SignatureScheme } from './crypto/signatureScheme';\r\nexport { KeyType } from './crypto/keyType';\r\nexport { Address } from './crypto/address';\r\nexport { Account } from './wallet/account';\r\nexport { Identity } from './wallet/identity';\r\nexport { Wallet } from './wallet/wallet';\r\nexport { ProgramBuilder, programFromMultiPubKeys, programFromParams, programFromPubKey } from './utils/program';\r\nexport { Reader } from './utils/reader';\r\nexport { Writer } from './utils/writer';\r\n\r\nimport * as OpCode from './utils/opCode';\r\nexport { OpCode };\r\n\r\nimport * as Hash from './utils/hash';\r\nexport { Hash };\r\n\r\nimport * as Serialize from './utils/serialize';\r\nexport { Serialize };\r\n"],"sourceRoot":""}